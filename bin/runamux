#!/bin/bash

#
# █▀▄ █ █ █▄ █ ▄▀▄ █▄ ▄█ █ █ ▀▄▀
# █▀▄ ▀▄█ █ ▀█ █▀█ █ ▀ █ ▀▄█ █ █
#
#  a simple tmux session runner
#

# Get script install prefix, assuming script is ${PREFIX}/bin/runamux
_pref=$(cd -P "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

readonly _pref

#
# Log message to stderr
#
m() {
  echo "$*" >&2
}

#
# tmux shortcut
#
t() {
  tmux "$@"
}

#
# tmux, silent all output
#
s() {
  t "$@" &>/dev/null
}

#
# tmux, silent stderr only
#
e() {
  t "$@" 2>/dev/null
}

#
# Shortcut to 'tmux display-message -p'
#
d() {
  e display-message -p "$@"
}

#
# Get pane child process PID
#
pane-pid() {
  d -t "$1" '#{pane_pid}'
}

#
# Check if current server has session named '$1'
#
has-session() {
  s has-session -t "$1"
}

#
# Check if last created session has window named '$1'
#
has-window() {
  [ -z "$_session" ] && return 1
  tmux list-windows -F '#W' -t "$_session" | grep -sq "^$1$"
}

#
# Start a new detached session
#
session() {
  _session=$1
  _window=

  if has-session "$1"; then
    return
  fi

  m "Create session '$1'"

  t new-session -dn "${1}_placeholder" -s "$1" pause
  t set-environment -ht "=$1" RUNAMUX_PREFIX "$RUNAMUX_PREFIX"
}

#
# Add a new window in last created session.
#
window() {
  if [ -z "$_session" ]; then
    return 1
  fi

  _window=$1

  if has-window "$1"; then
    return
  fi

  m "Create window '$1'"

  _pane=$(e new-window -Pdn "$1" -t "=$_session:" -F '#D' pause)

  local _ph_name="${_session}_placeholder"
  local _ph_target="=$_session:=$_ph_name"

  # close placeholder window
  if has-window "$_ph_name"; then
    local _ph_pid

    # close by killing subprocess (kill-window doesn't do this)
    if _ph_pid=$(pane-pid "$_ph_target"); then
      m "Close placeholder window for '$_session' (PID=$_ph_pid)"
      kill -SIGINT "$_ph_pid"
    fi
  fi
}

#
# Create new pane (horizontal split)
#
pane() {
  if [ -z "$_session" ] || [ -z "$_window" ]; then
    return 1
  fi

  local _ppid _newp

  m "Create pane '$*'"

  if _newp=$(e split-window -Pht "=$_session:=$_window" -F '#D' "$@"); then
    t set-option -pt "$_newp" remain-on-exit on
    t set-hook -pt "$_newp" pane-died \
      "run -b $_pref/libexec/runamux/notify-died"
    t set-hook -pt "$_newp" alert-bell \
      "run -b $_pref/libexec/runamux/notify-bell"
  fi

  # close placeholder pane
  if [ "$_pane" ]; then
    if _ppid=$(pane-pid "$_pane"); then
      m "Close placeholder pane '$_pane' (PID=$_ppid)"
      kill -SIGINT "$_ppid"
    fi
  fi

  unset _pane
}

#
# Print usage
#
usage() {
  echo "Usage: $0 CONFIG
Start a tmux session defined in the file CONFIG.

Options:

Argument CONFIG can be a path to a file as-is, the base
name of a .conf file, or a CONFIG.conf file in the
runamux config directory, first file found in that order
is used.

Runamux config directory is \$XDG_CONFIG_HOME/runamux.

The config file must be a Bash script. These functions are
available to start sessions, windows and panes:

  session NAME     Start new detached session, named NAME.
  window NAME      Add new window to last created session.
  pane COMMAND...  Add new pane and run COMMAND in it.

Environment:

  XDG_CONFIG_HOME   Defaults to \$HOME/.config

Report bugs at https://github.com/241m/runamux"
}

version() {
  echo "$(basename "$0") 0.1.0"
  echo
  echo "Written by Zaim Bakar."
}

#
# main()
#

if [ -z "$1" ]; then
  usage
  exit 1
fi

case "$1" in
  -h|--help)
    usage
    exit
    ;;
  --version)
    version
    exit
esac

# some sanity checks
for f in runamux/notify-died runamux/notify-bell; do
  if [ ! -f "$_pref/libexec/$f" ]; then
    echo "Required libexec script not found: $f"
    exit 1
  fi
done

for f in $1 $1.conf "${XDG_CONFIG_HOME:-$HOME/.config}/runamux/$1.conf"; do
  # shellcheck source=/dev/null
  if [ -f "$f" ]; then
    . "$f"
    break
  fi
done
