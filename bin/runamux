#!/bin/bash

#
# █▀▄ █ █ █▄ █ ▄▀▄ █▄ ▄█ █ █ ▀▄▀
# █▀▄ ▀▄█ █ ▀█ █▀█ █ ▀ █ ▀▄█ █ █
#
#  a simple tmux session runner
#

set -u

# Get script install prefix, assuming script is ${PREFIX}/bin/runamux
PREFIX=$(cd -P "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

readonly PREFIX
readonly LIBEXEC=${PREFIX}/libexec/runamux

# active session
session_name=
session_uuid=

# active window
window_name=
window_uuid=

#
# tmux command shortcuts
#

# tmux shortcut
#
t() {
  tmux "$@"
}

# tmux, silent all output
#
s() {
  t "$@" &>/dev/null
}

# tmux, silent stderr only
#
e() {
  t "$@" 2>/dev/null
}

# Shortcut to 'tmux display-message -p'
#
d() {
  e display-message -p "$@"
}

#
# Helpers
#

# Log message to stderr
#
m() {
  local s=${session_name:+ $session_name}${window_name:+:$window_name}
  echo "runamux$s $*" >&2
}

# Get arbitrary info about target
#
get() {
  : "${1:?get key name required}"
  : "${2:?get target required}"
  d -t "$2" "#{$1}"
}

# Check if current server has session named '$1'
#
has-session() {
  : "${1:?has-session target required}"
  s has-session -t "$1"
}

# Check if last created session has window named '$1'
#
has-window() {
  : "${1:?has-window target required}"
  : "${session_uuid:?has-window requires a created session}"
  e list-windows -F '#W' -t "$session_uuid" | grep -sq "^$1$"
}

# Kill old unused sessions/windows
#
kill-all() {
  : # TODO
}

#
# Commands
#

# Start a detached session
#
session() {
  session_name=
  session_uuid=
  window_name=
  window_uuid=

  local tokill=0

  [ "$1" = -k ] && {
    tokill=1
    shift
  }

  [ "$1" ] || {
    m "ERROR: session name required"
    return 1
  }

  session_name=$1

  m "activating session '$session_name'"

  has-session "$session_name" && {
    m "session named '$session_name' already exists"

    (( tokill )) && {
      : # TODO
    }
  }
}

# Add a new window in last created session
#
window() {
  window_name=
  window_uuid=

  local tokill=0

  [ "$1" = -k ] && {
    tokill=1
    shift
  }

  [ "$1" ] || {
    m "ERROR: window name required"
    return 1
  }

  [ "$session_name" ] || {
    m "ERROR: no active session to create window in (call 'session' first)"
    return 1
  }

  window_name=$1

  m "activating window '$window_name'"

  [ "$session_uuid" ] || {
    return
  }

  has-window "$window_name" && {
    m "window named '$window_name' already exists"

    (( tokill )) && {
      : # TODO
    }
  }
}

# Create new pane (horizontal split)
#
pane() {
  [ "$1" ] || {
    m "ERROR: pane command arg required"
    return 1
  }

  trap kill-all RETURN

  [ "$window_uuid" ] && {
    m "split-window '$window_name'"
    m "- command: '$*'"
    t splitw -ht "$window_uuid" "$@"
    t selectl -t "$window_uuid" tiled
    return
  }

  [ "$window_name" ] || {
    m "ERROR: no active window to create pane in (call 'window' first)"
    return 1
  }

  [ "$session_uuid" ] && {
    local t="$session_uuid:"
    local f="#{window_id}"

    m "new-window '$window_name'"
    m "- command '$*'"
    window_uuid=$(e neww -dt "$t" -n "$window_name" -PF "$f" "$@") || {
      m "could not create new window (exit $?)"
      window_uuid=
      return 1
    }

    return 0
  }

  [ "$session_name" ] && {
    local s=$session_name
    local w=$window_name
    local f='#{session_id} #{window_id}'
    local d

    m "new-session '$s'"
    m "- window '$w'"
    m "-- command '$*'"
    d=$(e new -ds "$s" -n "$w" -PF "$f" "$@") || {
      m "could not create new session (exit $?)"
      session_uuid=
      return 1
    }

    read -r session_uuid window_uuid <<< "$d"

    return
  }

  m "ERROR: no active session to create pane in (call 'session' first)"

  return 1
}

#
# Usage and Version
#

# Print usage
#
usage() {
  echo "Usage: $0 CONFIG
Start a tmux session defined in the file CONFIG.

Options:

Argument CONFIG can be a path to a file as-is, the base
name of a .conf file, or a CONFIG.conf file in the
runamux config directory, first file found in that order
is used.

Runamux config directory is \$XDG_CONFIG_HOME/runamux.

The config file must be a Bash script. These functions are
available to start sessions, windows and panes:

  session [-k] NAME  Start new detached session. If the
                     '-k' flag is passed, and a session
                     with same name exists, kill it.

  window [-k] NAME   Add a window to last created session.
                     The '-k' flag is similiar to above.

  pane COMMAND...    Add a pane and run COMMAND in it.

Environment:

  XDG_CONFIG_HOME   Defaults to \$HOME/.config

Report bugs at https://github.com/241m/runamux"
}

# Version and author
#
version() {
  echo "$(basename "$0") 0.1.0"
  echo
  echo "Written by Zaim Bakar."
}

#
# main()
#

if [ -z "$1" ]; then
  usage
  exit 1
fi

case "$1" in
  -h|--help)
    usage
    exit
    ;;
  --version)
    version
    exit
esac

# some sanity checks
for f in $LIBEXEC/notify-died $LIBEXEC/notify-bell; do
  if [ ! -f "$f" ]; then
    echo "Required libexec script not found: $f"
    exit 1
  fi
done

for f in $1 $1.conf "${XDG_CONFIG_HOME:-$HOME/.config}/runamux/$1.conf"; do
  # shellcheck source=/dev/null
  if [ -f "$f" ]; then
    . "$f"
    break
  fi
done
