#!/bin/bash

#
# █▀▄ █ █ █▄ █ ▄▀▄ █▄ ▄█ █ █ ▀▄▀
# █▀▄ ▀▄█ █ ▀█ █▀█ █ ▀ █ ▀▄█ █ █
#
#  a simple tmux session runner
#

set -u

# Get script install prefix, assuming script is ${PREFIX}/bin/runamux
prefix=$(cd -P "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

readonly prefix

# global state vars
session_name=
session_uuid=
window_name=
window_uuid=

#
# Log message to stderr
#
m() {
  echo "[runamux${session_name:+ $session_name}] $*" >&2
}

#
# tmux shortcut
#
t() {
  tmux "$@"
}

#
# tmux, silent all output
#
s() {
  t "$@" &>/dev/null
}

#
# tmux, silent stderr only
#
e() {
  t "$@" 2>/dev/null
}

#
# Shortcut to 'tmux display-message -p'
#
d() {
  e display-message -p "$@"
}

#
# Get pane child process PID
#
pane-pid() {
  d -t "$1" '#{pane_pid}'
}

#
# (helper) Kill pane (kills child process, not just the pane)
#
_kill() {
  local \
    id=${1:?_kill id arg required} \
    pid=${2:?_kill pid arg required}

  m "Killing pane ID=$id PID=$pid"

  t set-option -pt "$id" remain-on-exit off
  t set-hook -upt "$id" pane-died

  # kill child process
  (( pid > 1 )) && kill -SIGINT "$pid" &>/dev/null

  # actually close the pane
  s kill-pane -t "$id"

  m "Pane killed (ID=$id PID=$pid)"
}

#
# Kill pane
#
kill-pane() {
  d -t "$1" -F '#D #{pane_pid}' | while read -r id pid; do
    _kill "$id" "$pid"
  done
}

#
# Kill window (kill child process of all child panes)
#
kill-window() {
  m "Killing all panes in window '$1'"
  e list-panes -t "$1" -F '#D #{pane_pid}' | while read -r id pid; do
    _kill "$id" "$pid"
  done
}

#
# Check if current server has session named '$1'
#
has-session() {
  s has-session -t "$1"
}

#
# Check if last created session has window named '$1'
#
has-window() {
  [ -z "$session_uuid" ] && return 1
  tmux list-windows -F '#W' -t "$session_uuid" | grep -sq "^${1:?}$"
}

#
# Start a new detached session
#
session() {
  session_name=${1:?}
  session_uuid=
  window_name=
  window_uuid=

  m "Creating session"

  local n=$session_name
  local t="=$n"

  has-session "$t" && {
    m "Session already exists: do nothing"

    session_uuid=$(d -t "$t:" '#{session_id}') || {
      m "Failed to get session id (exit status: $?)"
      session_uuid=
    }

    return 1
  }

  session_uuid=$(e new -dn "${n}/TMP" -s "$n" -PF '#{session_id}' pause) || {
    m "Failed to create session (exit status: $?)"
    session_name=
    session_uuid=
    return 1
  }

  t set-environment -t "$session_uuid" RUNAMUX_PREFIX "$prefix"

  m "Session created"
}

#
# Add a new window in last created session
#
window() {
  if [ -z "$session_uuid" ]; then
    return 1
  fi

  local \
    kill_existing=0 \
    window_exists=0 \
    target

  if [ "${1:?}" = -k ]; then
    kill_existing=1
    shift
  fi

  m "Creating window '${1:?}'"

  if has-window "$1"; then
    if (( !kill_existing )); then
      m "Window already exists: do nothing"
      return 1
    fi
    window_exists=1
  fi

  window_name=$1/TMP
  window_uuid=

  if has-window "$session_name/TMP"; then
    target="$session_uuid:=$session_name/TMP"

    if ! t rename-window -t "$target" "$window_name"; then
      m "Failed to rename placeholder session window (exit status: $?)"
      window_name=
      return 1
    fi
  elif ! t new-window -dn "$window_name" -t "$session_uuid:" pause; then
    m "Failed to create new window (exit status: $?)"
    window_name=
    return 1
  fi

  target="$session_uuid:=$window_name"

  if ! window_uuid=$(d -t "$target" '#{window_id}'); then
    m "Failed to get window id (exit status: $?)"
    window_name=
    window_uuid=
    return 1
  fi

  # kill existing window, if any
  if (( window_exists )); then
    kill-window "$1"
  fi

  # set remain-on-exit on window so that any panes created that
  # exited early, will remain for examining
  t set-option -wt "$session_uuid:$window_uuid" remain-on-exit on

  m "Window '$1' created"
}

#
# Create new pane (horizontal split)
#
pane() {
  if [ -z "$session_uuid" ] || [ -z "$window_name" ] || [ -z "$window_uuid" ]
  then
    return 1
  fi

  local \
    target="$session_uuid:$window_uuid" \
    placeholder='' \
    pane

  m "Creating pane '$*'"

  if [[ "$window_name" = */TMP ]]; then
    placeholder=$(d -t "$session_uuid:=$window_name" '#{pane_id}')
  fi

  if pane=$(e split-window -Pht "$target" -F '#D' "$@"); then
    t set-hook -pt "$pane" pane-died \
      "run -b $prefix/libexec/runamux/notify-died"
    t set-hook -pt "$pane" alert-bell \
      "run -b $prefix/libexec/runamux/notify-bell"
  else
    m "Failed to add pane (exit status: $?)"
    return 1
  fi

  # close placeholder pane
  if [ "$placeholder" ]; then
    m "Closing placeholder pane '$window_name' (ID=$placeholder)"
    window_name=${window_name%%/TMP}
    kill-pane "$placeholder"
    t rename-window -t "$session_uuid:$window_uuid" "$window_name"
  fi

  m "Pane '$1' created"
}

#
# Print usage
#
usage() {
  echo "Usage: $0 CONFIG
Start a tmux session defined in the file CONFIG.

Options:

Argument CONFIG can be a path to a file as-is, the base
name of a .conf file, or a CONFIG.conf file in the
runamux config directory, first file found in that order
is used.

Runamux config directory is \$XDG_CONFIG_HOME/runamux.

The config file must be a Bash script. These functions are
available to start sessions, windows and panes:

  session NAME      Start new detached session.

  window [-k] NAME  Add a window to last created session.
                    If '-k' option passed, and a window
                    with same name exists, kill it.

  pane COMMAND...   Add a pane and run COMMAND in it.

Environment:

  XDG_CONFIG_HOME   Defaults to \$HOME/.config

Report bugs at https://github.com/241m/runamux"
}

version() {
  echo "$(basename "$0") 0.1.0"
  echo
  echo "Written by Zaim Bakar."
}

#
# main()
#

if [ -z "$1" ]; then
  usage
  exit 1
fi

case "$1" in
  -h|--help)
    usage
    exit
    ;;
  --version)
    version
    exit
esac

# some sanity checks
for f in runamux/notify-died runamux/notify-bell; do
  if [ ! -f "$prefix/libexec/$f" ]; then
    echo "Required libexec script not found: $f"
    exit 1
  fi
done

for f in $1 $1.conf "${XDG_CONFIG_HOME:-$HOME/.config}/runamux/$1.conf"; do
  # shellcheck source=/dev/null
  if [ -f "$f" ]; then
    . "$f"
    break
  fi
done
